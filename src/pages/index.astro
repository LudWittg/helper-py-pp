---

---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Astro + Pyodide + Z3</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.jsdelivr.net/pyodide/v0.27.5/full/pyodide.js"></script>
    <style>
      body {
        font-family: sans-serif;
        margin: 2rem;
      }
      textarea {
        width: 100%;
        max-width: 600px;
      }
      pre {
        background: #f5f5f5;
        padding: 1rem;
      }
    </style>
  </head>
  <body>
    <h1>Astro + Pyodide + Z3 Example</h1>
    <p>
      This example loads Pyodide, then installs a Z3 wheel that was built using
      the build configuration from the <a
        href="https://github.com/Z3Prover/z3/blob/master/.github/workflows/pyodide.yml"
        target="_blank"
        rel="noreferrer">pyodide.yml workflow</a
      > (which sets CFLAGS and LDFLAGS appropriately), and finally runs some Z3 code.
    </p>

    <p>Enter your Python code below:</p>
    <textarea id="python-input" rows="8" cols="60">
# Example Python code using Z3
from z3 import *
import numpy as np
    </textarea>
    <br />
    <button id="run-btn">Run Python</button>
    <h2>Output:</h2>
    <pre id="output">Loading Pyodide and Z3...</pre>

    <script type="module">
      async function main() {
        const outputEl = document.getElementById("output");
        const runButton = document.getElementById("run-btn");
        const inputEl = document.getElementById("python-input");

        // Disable the button until Pyodide is loaded
        runButton.disabled = true;

        // Load Pyodide from the /public/pyodide/ folder
        outputEl.textContent = "Loading Pyodide...";
        // Use the following line if you want to load a local version of Pyodide
        //const pyodide = await loadPyodide({ indexURL: "/pyodide/" });
        const pyodide = await loadPyodide();
        outputEl.textContent = "Pyodide loaded. Installing Z3 and numpy...";

        // Load micropip to allow installation of Python wheels.
        await pyodide.loadPackage("micropip");
        // Install the Z3 wheel.
        // (It should be built according to the pyodide.yml workflow in Z3's repo)
        // Using wheel from https://microsoft.github.io/z3guide/z3_solver-4.13.4.0-py3-none-pyodide_2024_0_wasm32.whl
        const wheelURL =
          window.location.origin +
          "/z3_solver-4.13.4.0-py3-none-pyodide_2024_0_wasm32.whl";
        await pyodide.runPythonAsync(`
          import micropip
          await micropip.install("${wheelURL}")
          await micropip.install("numpy")
        `);
        outputEl.textContent = "Z3 installed! Fetching example code...";
        runButton.disabled = false;

        // Fetch the Python code from the public folder. Check if the file exists.
        // If it doesn't, log an error message to the console.
        fetch("/python_code/example2.py")
          .then((response) => {
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.text();
          })
          .then((code) => {
            // Set the textarea value to the fetched code and display a message.
            inputEl.value = code;
            outputEl.textContent = "Python code loaded. Ready to run.";
            // Run the code immediately after the fetching is done.
            runCode();
          })
          .catch((err) => {
            console.error("Error loading Python code:", err);
            outputEl.textContent = "Error loading Python code: " + err.message;
          });
        
        const runCode = async () => {
          // Set up stdout and stderr redirection to capture output.
          let capturedOutput = "";
          pyodide.setStdout({
            batched: (text) => (capturedOutput += "\n" + text),
          });
          pyodide.setStderr({
            batched: (text) => (capturedOutput += "Error: " + text),
          });

          try {
            outputEl.textContent = "Running Python code...";
            // Execute the code from the textarea.
            const result = await pyodide.runPythonAsync(inputEl.value);
            outputEl.textContent =
              capturedOutput ||
              (result !== undefined ? result.toString() : "No output");
          } catch (err) {
            outputEl.textContent = "Runtime error: " + err;
          }
        };

        runButton.onclick = runCode;
      }

      // Dynamically load pyodide.js from your '/pyodide/' folder.
      const script = document.createElement("script");
      script.src = "https://cdn.jsdelivr.net/pyodide/v0.27.5/full/pyodide.js";
      script.onload = main;
      document.body.appendChild(script);
    </script>
  </body>
</html>
